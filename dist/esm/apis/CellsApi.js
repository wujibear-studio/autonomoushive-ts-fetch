/* tslint:disable */
/* eslint-disable */
/**
 * Autonomous Hive REST API
 * OpenAPI documentation for all Autonomous Hive API endpoints.
 *
 * The version of the OpenAPI document: 0.0.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
/**
 *
 */
export class CellsApi extends runtime.BaseAPI {
    /**
     * Create a Cell within a Colony, or to further organize an existing Cell
     * Create Cell
     */
    createCellRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.colonyId !== undefined && requestParameters.colonyId !== null) {
                headerParameters['ColonyId'] = String(requestParameters.colonyId);
            }
            const response = yield this.request({
                path: `/cells`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.cell,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Create a Cell within a Colony, or to further organize an existing Cell
     * Create Cell
     */
    createCell(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCellRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get details about a specific Cell
     * Get Cell
     */
    getCellRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cellId === null || requestParameters.cellId === undefined) {
                throw new runtime.RequiredError('cellId', 'Required parameter requestParameters.cellId was null or undefined when calling getCell.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.colonyId !== undefined && requestParameters.colonyId !== null) {
                headerParameters['ColonyId'] = String(requestParameters.colonyId);
            }
            const response = yield this.request({
                path: `/cells/{cellId}`.replace(`{${"cellId"}}`, encodeURIComponent(String(requestParameters.cellId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Get details about a specific Cell
     * Get Cell
     */
    getCell(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCellRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Cells for a particular Colony
     * List Cells
     */
    getCellsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            const headerParameters = {};
            if (requestParameters.colonyId !== undefined && requestParameters.colonyId !== null) {
                headerParameters['ColonyId'] = String(requestParameters.colonyId);
            }
            const response = yield this.request({
                path: `/cells`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * List Cells for a particular Colony
     * List Cells
     */
    getCells(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCellsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Cell details
     * Update Cell
     */
    updateCellRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.cellId === null || requestParameters.cellId === undefined) {
                throw new runtime.RequiredError('cellId', 'Required parameter requestParameters.cellId was null or undefined when calling updateCell.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/cells/{cellId}`.replace(`{${"cellId"}}`, encodeURIComponent(String(requestParameters.cellId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.cell,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Update Cell details
     * Update Cell
     */
    updateCell(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateCellRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
