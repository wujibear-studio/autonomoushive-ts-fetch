/* tslint:disable */
/* eslint-disable */
/**
 * Autonomous Hive REST API
 * OpenAPI documentation for all Autonomous Hive API endpoints.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSessionRequest,
  ErrorList,
  GetSession404Response,
  Session,
} from '../models';

export interface CreateSessionOperationRequest {
    createSessionRequest?: CreateSessionRequest;
}

export interface GetSessionRequest {
    sessionToken: any;
}

/**
 * SessionsApi - interface
 * 
 * @export
 * @interface SessionsApiInterface
 */
export interface SessionsApiInterface {
    /**
     * Log in to the service and retrieve a Session token to authenticate future calls to the service
     * @summary Create Session
     * @param {CreateSessionRequest} [createSessionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    createSessionRaw(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>>;

    /**
     * Log in to the service and retrieve a Session token to authenticate future calls to the service
     * Create Session
     */
    createSession(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session>;

    /**
     * End any active session tokens
     * @summary Delete Active Sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    deleteSessionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * End any active session tokens
     * Delete Active Sessions
     */
    deleteSessions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves Session details
     * @summary Get Session
     * @param {any} sessionToken An active session token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionsApiInterface
     */
    getSessionRaw(requestParameters: GetSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>>;

    /**
     * Retrieves Session details
     * Get Session
     */
    getSession(requestParameters: GetSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session>;

}

/**
 * 
 */
export class SessionsApi extends runtime.BaseAPI implements SessionsApiInterface {

    /**
     * Log in to the service and retrieve a Session token to authenticate future calls to the service
     * Create Session
     */
    async createSessionRaw(requestParameters: CreateSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createSessionRequest,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Log in to the service and retrieve a Session token to authenticate future calls to the service
     * Create Session
     */
    async createSession(requestParameters: CreateSessionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.createSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * End any active session tokens
     * Delete Active Sessions
     */
    async deleteSessionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * End any active session tokens
     * Delete Active Sessions
     */
    async deleteSessions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSessionsRaw(initOverrides);
    }

    /**
     * Retrieves Session details
     * Get Session
     */
    async getSessionRaw(requestParameters: GetSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Session>> {
        if (requestParameters.sessionToken === null || requestParameters.sessionToken === undefined) {
            throw new runtime.RequiredError('sessionToken','Required parameter requestParameters.sessionToken was null or undefined when calling getSession.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sessions/{sessionToken}`.replace(`{${"sessionToken"}}`, encodeURIComponent(String(requestParameters.sessionToken))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Retrieves Session details
     * Get Session
     */
    async getSession(requestParameters: GetSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Session> {
        const response = await this.getSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
