/* tslint:disable */
/* eslint-disable */
/**
 * Autonomous Hive REST API
 * OpenAPI documentation for all Autonomous Hive API endpoints.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Colony,
  ColonyParams,
  ErrorList,
  GetColonies200Response,
} from '../models';
import {
    ColonyFromJSON,
    ColonyToJSON,
    ColonyParamsFromJSON,
    ColonyParamsToJSON,
    ErrorListFromJSON,
    ErrorListToJSON,
    GetColonies200ResponseFromJSON,
    GetColonies200ResponseToJSON,
} from '../models';

export interface CreateColonyRequest {
    colonyParams?: ColonyParams;
}

export interface GetColoniesRequest {
    limit?: any;
    name?: any;
}

export interface GetColonyRequest {
    colonyId: any;
}

export interface UpdateColonyRequest {
    colonyId: any;
    colonyParams?: ColonyParams;
}

/**
 * ColoniesApi - interface
 * 
 * @export
 * @interface ColoniesApiInterface
 */
export interface ColoniesApiInterface {
    /**
     * Create a Colony to be a representation of your Company, Co-op, organization, or bridge club
     * @summary Create Colony
     * @param {ColonyParams} [colonyParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColoniesApiInterface
     */
    createColonyRaw(requestParameters: CreateColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Colony>>;

    /**
     * Create a Colony to be a representation of your Company, Co-op, organization, or bridge club
     * Create Colony
     */
    createColony(requestParameters: CreateColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Colony>;

    /**
     * A list of all Colonies public information
     * @summary List Colonies
     * @param {any} [limit] Number of records to return in one call
     * @param {any} [name] Filter by Colony name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColoniesApiInterface
     */
    getColoniesRaw(requestParameters: GetColoniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetColonies200Response>>;

    /**
     * A list of all Colonies public information
     * List Colonies
     */
    getColonies(requestParameters: GetColoniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetColonies200Response>;

    /**
     * Get data about a specific Colony
     * @summary Get Colony
     * @param {any} colonyId A Colony ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColoniesApiInterface
     */
    getColonyRaw(requestParameters: GetColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Colony>>;

    /**
     * Get data about a specific Colony
     * Get Colony
     */
    getColony(requestParameters: GetColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Colony>;

    /**
     * Update details about one of your Colonies
     * @summary Update Colony
     * @param {any} colonyId A Colony ID
     * @param {ColonyParams} [colonyParams] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ColoniesApiInterface
     */
    updateColonyRaw(requestParameters: UpdateColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Colony>>;

    /**
     * Update details about one of your Colonies
     * Update Colony
     */
    updateColony(requestParameters: UpdateColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Colony>;

}

/**
 * 
 */
export class ColoniesApi extends runtime.BaseAPI implements ColoniesApiInterface {

    /**
     * Create a Colony to be a representation of your Company, Co-op, organization, or bridge club
     * Create Colony
     */
    async createColonyRaw(requestParameters: CreateColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Colony>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/colonies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ColonyParamsToJSON(requestParameters.colonyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColonyFromJSON(jsonValue));
    }

    /**
     * Create a Colony to be a representation of your Company, Co-op, organization, or bridge club
     * Create Colony
     */
    async createColony(requestParameters: CreateColonyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Colony> {
        const response = await this.createColonyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * A list of all Colonies public information
     * List Colonies
     */
    async getColoniesRaw(requestParameters: GetColoniesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetColonies200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/colonies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetColonies200ResponseFromJSON(jsonValue));
    }

    /**
     * A list of all Colonies public information
     * List Colonies
     */
    async getColonies(requestParameters: GetColoniesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetColonies200Response> {
        const response = await this.getColoniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get data about a specific Colony
     * Get Colony
     */
    async getColonyRaw(requestParameters: GetColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Colony>> {
        if (requestParameters.colonyId === null || requestParameters.colonyId === undefined) {
            throw new runtime.RequiredError('colonyId','Required parameter requestParameters.colonyId was null or undefined when calling getColony.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/colonies/{colonyId}`.replace(`{${"colonyId"}}`, encodeURIComponent(String(requestParameters.colonyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColonyFromJSON(jsonValue));
    }

    /**
     * Get data about a specific Colony
     * Get Colony
     */
    async getColony(requestParameters: GetColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Colony> {
        const response = await this.getColonyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update details about one of your Colonies
     * Update Colony
     */
    async updateColonyRaw(requestParameters: UpdateColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Colony>> {
        if (requestParameters.colonyId === null || requestParameters.colonyId === undefined) {
            throw new runtime.RequiredError('colonyId','Required parameter requestParameters.colonyId was null or undefined when calling updateColony.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/colonies/{colonyId}`.replace(`{${"colonyId"}}`, encodeURIComponent(String(requestParameters.colonyId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ColonyParamsToJSON(requestParameters.colonyParams),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColonyFromJSON(jsonValue));
    }

    /**
     * Update details about one of your Colonies
     * Update Colony
     */
    async updateColony(requestParameters: UpdateColonyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Colony> {
        const response = await this.updateColonyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
